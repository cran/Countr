// This file was generated by Rcpp::compileAttributes
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "../inst/include/Countr.h"
#include "../inst/include/Countr_types.h"
#include <RcppArmadillo.h>
#include <Rcpp.h>
#include <string>
#include <set>

using namespace Rcpp;

// dRenewalFrankCopula_user
arma::vec dRenewalFrankCopula_user(arma::Col <unsigned> x, arma::Col <unsigned> y, Rcpp::Function survX, Rcpp::Function survY, Rcpp::List distParsX, Rcpp::List distParsY, Rcpp::List extrapolParsX, Rcpp::List extrapolParsY, double theta, double time, bool logFlag, unsigned nsteps, bool extrap);
static SEXP Countr_dRenewalFrankCopula_user_try(SEXP xSEXP, SEXP ySEXP, SEXP survXSEXP, SEXP survYSEXP, SEXP distParsXSEXP, SEXP distParsYSEXP, SEXP extrapolParsXSEXP, SEXP extrapolParsYSEXP, SEXP thetaSEXP, SEXP timeSEXP, SEXP logFlagSEXP, SEXP nstepsSEXP, SEXP extrapSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::traits::input_parameter< arma::Col <unsigned> >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::Col <unsigned> >::type y(ySEXP);
    Rcpp::traits::input_parameter< Rcpp::Function >::type survX(survXSEXP);
    Rcpp::traits::input_parameter< Rcpp::Function >::type survY(survYSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type distParsX(distParsXSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type distParsY(distParsYSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type extrapolParsX(extrapolParsXSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type extrapolParsY(extrapolParsYSEXP);
    Rcpp::traits::input_parameter< double >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< double >::type time(timeSEXP);
    Rcpp::traits::input_parameter< bool >::type logFlag(logFlagSEXP);
    Rcpp::traits::input_parameter< unsigned >::type nsteps(nstepsSEXP);
    Rcpp::traits::input_parameter< bool >::type extrap(extrapSEXP);
    __result = Rcpp::wrap(dRenewalFrankCopula_user(x, y, survX, survY, distParsX, distParsY, extrapolParsX, extrapolParsY, theta, time, logFlag, nsteps, extrap));
    return __result;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP Countr_dRenewalFrankCopula_user(SEXP xSEXP, SEXP ySEXP, SEXP survXSEXP, SEXP survYSEXP, SEXP distParsXSEXP, SEXP distParsYSEXP, SEXP extrapolParsXSEXP, SEXP extrapolParsYSEXP, SEXP thetaSEXP, SEXP timeSEXP, SEXP logFlagSEXP, SEXP nstepsSEXP, SEXP extrapSEXP) {
    SEXP __result;
    {
        Rcpp::RNGScope __rngScope;
        __result = PROTECT(Countr_dRenewalFrankCopula_user_try(xSEXP, ySEXP, survXSEXP, survYSEXP, distParsXSEXP, distParsYSEXP, extrapolParsXSEXP, extrapolParsYSEXP, thetaSEXP, timeSEXP, logFlagSEXP, nstepsSEXP, extrapSEXP));
    }
    Rboolean __isInterrupt = Rf_inherits(__result, "interrupted-error");
    if (__isInterrupt) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean __isError = Rf_inherits(__result, "try-error");
    if (__isError) {
        SEXP __msgSEXP = Rf_asChar(__result);
        UNPROTECT(1);
        Rf_error(CHAR(__msgSEXP));
    }
    UNPROTECT(1);
    return __result;
}
// dRenewalFrankCopula_bi
arma::vec dRenewalFrankCopula_bi(arma::Col <unsigned> x, arma::Col <unsigned> y, const std::string distX, const std::string distY, Rcpp::List distParsX, Rcpp::List distParsY, double theta, double time, bool logFlag, unsigned nsteps, bool extrap);
static SEXP Countr_dRenewalFrankCopula_bi_try(SEXP xSEXP, SEXP ySEXP, SEXP distXSEXP, SEXP distYSEXP, SEXP distParsXSEXP, SEXP distParsYSEXP, SEXP thetaSEXP, SEXP timeSEXP, SEXP logFlagSEXP, SEXP nstepsSEXP, SEXP extrapSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::traits::input_parameter< arma::Col <unsigned> >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::Col <unsigned> >::type y(ySEXP);
    Rcpp::traits::input_parameter< const std::string >::type distX(distXSEXP);
    Rcpp::traits::input_parameter< const std::string >::type distY(distYSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type distParsX(distParsXSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type distParsY(distParsYSEXP);
    Rcpp::traits::input_parameter< double >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< double >::type time(timeSEXP);
    Rcpp::traits::input_parameter< bool >::type logFlag(logFlagSEXP);
    Rcpp::traits::input_parameter< unsigned >::type nsteps(nstepsSEXP);
    Rcpp::traits::input_parameter< bool >::type extrap(extrapSEXP);
    __result = Rcpp::wrap(dRenewalFrankCopula_bi(x, y, distX, distY, distParsX, distParsY, theta, time, logFlag, nsteps, extrap));
    return __result;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP Countr_dRenewalFrankCopula_bi(SEXP xSEXP, SEXP ySEXP, SEXP distXSEXP, SEXP distYSEXP, SEXP distParsXSEXP, SEXP distParsYSEXP, SEXP thetaSEXP, SEXP timeSEXP, SEXP logFlagSEXP, SEXP nstepsSEXP, SEXP extrapSEXP) {
    SEXP __result;
    {
        Rcpp::RNGScope __rngScope;
        __result = PROTECT(Countr_dRenewalFrankCopula_bi_try(xSEXP, ySEXP, distXSEXP, distYSEXP, distParsXSEXP, distParsYSEXP, thetaSEXP, timeSEXP, logFlagSEXP, nstepsSEXP, extrapSEXP));
    }
    Rboolean __isInterrupt = Rf_inherits(__result, "interrupted-error");
    if (__isInterrupt) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean __isError = Rf_inherits(__result, "try-error");
    if (__isError) {
        SEXP __msgSEXP = Rf_asChar(__result);
        UNPROTECT(1);
        Rf_error(CHAR(__msgSEXP));
    }
    UNPROTECT(1);
    return __result;
}
// sWeibull
double sWeibull(double t, const Rcpp::List distPars);
RcppExport SEXP Countr_sWeibull(SEXP tSEXP, SEXP distParsSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< double >::type t(tSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List >::type distPars(distParsSEXP);
    __result = Rcpp::wrap(sWeibull(t, distPars));
    return __result;
END_RCPP
}
// sBurr
double sBurr(double t, const Rcpp::List distPars);
RcppExport SEXP Countr_sBurr(SEXP tSEXP, SEXP distParsSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< double >::type t(tSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List >::type distPars(distParsSEXP);
    __result = Rcpp::wrap(sBurr(t, distPars));
    return __result;
END_RCPP
}
// sgamma
double sgamma(double t, const Rcpp::List distPars);
RcppExport SEXP Countr_sgamma(SEXP tSEXP, SEXP distParsSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< double >::type t(tSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List >::type distPars(distParsSEXP);
    __result = Rcpp::wrap(sgamma(t, distPars));
    return __result;
END_RCPP
}
// sgengamma
double sgengamma(double t, const Rcpp::List distPars);
RcppExport SEXP Countr_sgengamma(SEXP tSEXP, SEXP distParsSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< double >::type t(tSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List >::type distPars(distParsSEXP);
    __result = Rcpp::wrap(sgengamma(t, distPars));
    return __result;
END_RCPP
}
// surv
double surv(double t, const Rcpp::List distPars, const std::string dist);
RcppExport SEXP Countr_surv(SEXP tSEXP, SEXP distParsSEXP, SEXP distSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< double >::type t(tSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List >::type distPars(distParsSEXP);
    Rcpp::traits::input_parameter< const std::string >::type dist(distSEXP);
    __result = Rcpp::wrap(surv(t, distPars, dist));
    return __result;
END_RCPP
}
// dCount_allProbs_bi
arma::vec dCount_allProbs_bi(arma::Col<unsigned> x, const Rcpp::List distPars, const std::string dist, const unsigned& nsteps, double time, bool extrap, bool logFlag);
RcppExport SEXP Countr_dCount_allProbs_bi(SEXP xSEXP, SEXP distParsSEXP, SEXP distSEXP, SEXP nstepsSEXP, SEXP timeSEXP, SEXP extrapSEXP, SEXP logFlagSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< arma::Col<unsigned> >::type x(xSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List >::type distPars(distParsSEXP);
    Rcpp::traits::input_parameter< const std::string >::type dist(distSEXP);
    Rcpp::traits::input_parameter< const unsigned& >::type nsteps(nstepsSEXP);
    Rcpp::traits::input_parameter< double >::type time(timeSEXP);
    Rcpp::traits::input_parameter< bool >::type extrap(extrapSEXP);
    Rcpp::traits::input_parameter< bool >::type logFlag(logFlagSEXP);
    __result = Rcpp::wrap(dCount_allProbs_bi(x, distPars, dist, nsteps, time, extrap, logFlag));
    return __result;
END_RCPP
}
// dCount_allProbs_user
arma::vec dCount_allProbs_user(arma::Col<unsigned> x, const Rcpp::List distPars, arma::vec extrapolPars, Rcpp::Function survR, const unsigned& nsteps, double time, bool extrap, bool logFlag);
RcppExport SEXP Countr_dCount_allProbs_user(SEXP xSEXP, SEXP distParsSEXP, SEXP extrapolParsSEXP, SEXP survRSEXP, SEXP nstepsSEXP, SEXP timeSEXP, SEXP extrapSEXP, SEXP logFlagSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< arma::Col<unsigned> >::type x(xSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List >::type distPars(distParsSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type extrapolPars(extrapolParsSEXP);
    Rcpp::traits::input_parameter< Rcpp::Function >::type survR(survRSEXP);
    Rcpp::traits::input_parameter< const unsigned& >::type nsteps(nstepsSEXP);
    Rcpp::traits::input_parameter< double >::type time(timeSEXP);
    Rcpp::traits::input_parameter< bool >::type extrap(extrapSEXP);
    Rcpp::traits::input_parameter< bool >::type logFlag(logFlagSEXP);
    __result = Rcpp::wrap(dCount_allProbs_user(x, distPars, extrapolPars, survR, nsteps, time, extrap, logFlag));
    return __result;
END_RCPP
}
// dCount_allProbs_scalar_bi
double dCount_allProbs_scalar_bi(unsigned x, const Rcpp::List distPars, const std::string dist, const unsigned& nsteps, double time, bool extrap, bool logFlag);
RcppExport SEXP Countr_dCount_allProbs_scalar_bi(SEXP xSEXP, SEXP distParsSEXP, SEXP distSEXP, SEXP nstepsSEXP, SEXP timeSEXP, SEXP extrapSEXP, SEXP logFlagSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< unsigned >::type x(xSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List >::type distPars(distParsSEXP);
    Rcpp::traits::input_parameter< const std::string >::type dist(distSEXP);
    Rcpp::traits::input_parameter< const unsigned& >::type nsteps(nstepsSEXP);
    Rcpp::traits::input_parameter< double >::type time(timeSEXP);
    Rcpp::traits::input_parameter< bool >::type extrap(extrapSEXP);
    Rcpp::traits::input_parameter< bool >::type logFlag(logFlagSEXP);
    __result = Rcpp::wrap(dCount_allProbs_scalar_bi(x, distPars, dist, nsteps, time, extrap, logFlag));
    return __result;
END_RCPP
}
// dCount_allProbs_scalar_user
double dCount_allProbs_scalar_user(unsigned x, const Rcpp::List distPars, arma::vec extrapolPars, Rcpp::Function survR, const unsigned& nsteps, double time, bool extrap, bool logFlag);
RcppExport SEXP Countr_dCount_allProbs_scalar_user(SEXP xSEXP, SEXP distParsSEXP, SEXP extrapolParsSEXP, SEXP survRSEXP, SEXP nstepsSEXP, SEXP timeSEXP, SEXP extrapSEXP, SEXP logFlagSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< unsigned >::type x(xSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List >::type distPars(distParsSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type extrapolPars(extrapolParsSEXP);
    Rcpp::traits::input_parameter< Rcpp::Function >::type survR(survRSEXP);
    Rcpp::traits::input_parameter< const unsigned& >::type nsteps(nstepsSEXP);
    Rcpp::traits::input_parameter< double >::type time(timeSEXP);
    Rcpp::traits::input_parameter< bool >::type extrap(extrapSEXP);
    Rcpp::traits::input_parameter< bool >::type logFlag(logFlagSEXP);
    __result = Rcpp::wrap(dCount_allProbs_scalar_user(x, distPars, extrapolPars, survR, nsteps, time, extrap, logFlag));
    return __result;
END_RCPP
}
// dCount_dePril_bi
arma::vec dCount_dePril_bi(arma::Col<unsigned> x, const Rcpp::List distPars, const std::string dist, const unsigned& nsteps, double time, bool extrap, bool cdfout, bool logFlag);
RcppExport SEXP Countr_dCount_dePril_bi(SEXP xSEXP, SEXP distParsSEXP, SEXP distSEXP, SEXP nstepsSEXP, SEXP timeSEXP, SEXP extrapSEXP, SEXP cdfoutSEXP, SEXP logFlagSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< arma::Col<unsigned> >::type x(xSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List >::type distPars(distParsSEXP);
    Rcpp::traits::input_parameter< const std::string >::type dist(distSEXP);
    Rcpp::traits::input_parameter< const unsigned& >::type nsteps(nstepsSEXP);
    Rcpp::traits::input_parameter< double >::type time(timeSEXP);
    Rcpp::traits::input_parameter< bool >::type extrap(extrapSEXP);
    Rcpp::traits::input_parameter< bool >::type cdfout(cdfoutSEXP);
    Rcpp::traits::input_parameter< bool >::type logFlag(logFlagSEXP);
    __result = Rcpp::wrap(dCount_dePril_bi(x, distPars, dist, nsteps, time, extrap, cdfout, logFlag));
    return __result;
END_RCPP
}
// dCount_dePril_user
arma::vec dCount_dePril_user(arma::Col<unsigned> x, const Rcpp::List distPars, arma::vec extrapolPars, Rcpp::Function survR, const unsigned& nsteps, double time, bool extrap, bool cdfout, bool logFlag);
RcppExport SEXP Countr_dCount_dePril_user(SEXP xSEXP, SEXP distParsSEXP, SEXP extrapolParsSEXP, SEXP survRSEXP, SEXP nstepsSEXP, SEXP timeSEXP, SEXP extrapSEXP, SEXP cdfoutSEXP, SEXP logFlagSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< arma::Col<unsigned> >::type x(xSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List >::type distPars(distParsSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type extrapolPars(extrapolParsSEXP);
    Rcpp::traits::input_parameter< Rcpp::Function >::type survR(survRSEXP);
    Rcpp::traits::input_parameter< const unsigned& >::type nsteps(nstepsSEXP);
    Rcpp::traits::input_parameter< double >::type time(timeSEXP);
    Rcpp::traits::input_parameter< bool >::type extrap(extrapSEXP);
    Rcpp::traits::input_parameter< bool >::type cdfout(cdfoutSEXP);
    Rcpp::traits::input_parameter< bool >::type logFlag(logFlagSEXP);
    __result = Rcpp::wrap(dCount_dePril_user(x, distPars, extrapolPars, survR, nsteps, time, extrap, cdfout, logFlag));
    return __result;
END_RCPP
}
// dCount_dePril_scalar_bi
double dCount_dePril_scalar_bi(unsigned x, const Rcpp::List distPars, const std::string dist, const unsigned& nsteps, double time, bool extrap, bool logFlag);
RcppExport SEXP Countr_dCount_dePril_scalar_bi(SEXP xSEXP, SEXP distParsSEXP, SEXP distSEXP, SEXP nstepsSEXP, SEXP timeSEXP, SEXP extrapSEXP, SEXP logFlagSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< unsigned >::type x(xSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List >::type distPars(distParsSEXP);
    Rcpp::traits::input_parameter< const std::string >::type dist(distSEXP);
    Rcpp::traits::input_parameter< const unsigned& >::type nsteps(nstepsSEXP);
    Rcpp::traits::input_parameter< double >::type time(timeSEXP);
    Rcpp::traits::input_parameter< bool >::type extrap(extrapSEXP);
    Rcpp::traits::input_parameter< bool >::type logFlag(logFlagSEXP);
    __result = Rcpp::wrap(dCount_dePril_scalar_bi(x, distPars, dist, nsteps, time, extrap, logFlag));
    return __result;
END_RCPP
}
// dCount_dePril_scalar_user
double dCount_dePril_scalar_user(unsigned x, const Rcpp::List distPars, arma::vec extrapolPars, Rcpp::Function survR, const unsigned& nsteps, double time, bool extrap, bool logFlag);
RcppExport SEXP Countr_dCount_dePril_scalar_user(SEXP xSEXP, SEXP distParsSEXP, SEXP extrapolParsSEXP, SEXP survRSEXP, SEXP nstepsSEXP, SEXP timeSEXP, SEXP extrapSEXP, SEXP logFlagSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< unsigned >::type x(xSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List >::type distPars(distParsSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type extrapolPars(extrapolParsSEXP);
    Rcpp::traits::input_parameter< Rcpp::Function >::type survR(survRSEXP);
    Rcpp::traits::input_parameter< const unsigned& >::type nsteps(nstepsSEXP);
    Rcpp::traits::input_parameter< double >::type time(timeSEXP);
    Rcpp::traits::input_parameter< bool >::type extrap(extrapSEXP);
    Rcpp::traits::input_parameter< bool >::type logFlag(logFlagSEXP);
    __result = Rcpp::wrap(dCount_dePril_scalar_user(x, distPars, extrapolPars, survR, nsteps, time, extrap, logFlag));
    return __result;
END_RCPP
}
// dCount_naive_bi
arma::vec dCount_naive_bi(arma::Col<unsigned> x, const Rcpp::List distPars, const std::string dist, const unsigned& nsteps, double time, bool extrap, bool cdfout, bool logFlag);
RcppExport SEXP Countr_dCount_naive_bi(SEXP xSEXP, SEXP distParsSEXP, SEXP distSEXP, SEXP nstepsSEXP, SEXP timeSEXP, SEXP extrapSEXP, SEXP cdfoutSEXP, SEXP logFlagSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< arma::Col<unsigned> >::type x(xSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List >::type distPars(distParsSEXP);
    Rcpp::traits::input_parameter< const std::string >::type dist(distSEXP);
    Rcpp::traits::input_parameter< const unsigned& >::type nsteps(nstepsSEXP);
    Rcpp::traits::input_parameter< double >::type time(timeSEXP);
    Rcpp::traits::input_parameter< bool >::type extrap(extrapSEXP);
    Rcpp::traits::input_parameter< bool >::type cdfout(cdfoutSEXP);
    Rcpp::traits::input_parameter< bool >::type logFlag(logFlagSEXP);
    __result = Rcpp::wrap(dCount_naive_bi(x, distPars, dist, nsteps, time, extrap, cdfout, logFlag));
    return __result;
END_RCPP
}
// dCount_naive_user
arma::vec dCount_naive_user(arma::Col<unsigned> x, const Rcpp::List distPars, arma::vec extrapolPars, Rcpp::Function survR, const unsigned& nsteps, double time, bool extrap, bool cdfout, bool logFlag);
RcppExport SEXP Countr_dCount_naive_user(SEXP xSEXP, SEXP distParsSEXP, SEXP extrapolParsSEXP, SEXP survRSEXP, SEXP nstepsSEXP, SEXP timeSEXP, SEXP extrapSEXP, SEXP cdfoutSEXP, SEXP logFlagSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< arma::Col<unsigned> >::type x(xSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List >::type distPars(distParsSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type extrapolPars(extrapolParsSEXP);
    Rcpp::traits::input_parameter< Rcpp::Function >::type survR(survRSEXP);
    Rcpp::traits::input_parameter< const unsigned& >::type nsteps(nstepsSEXP);
    Rcpp::traits::input_parameter< double >::type time(timeSEXP);
    Rcpp::traits::input_parameter< bool >::type extrap(extrapSEXP);
    Rcpp::traits::input_parameter< bool >::type cdfout(cdfoutSEXP);
    Rcpp::traits::input_parameter< bool >::type logFlag(logFlagSEXP);
    __result = Rcpp::wrap(dCount_naive_user(x, distPars, extrapolPars, survR, nsteps, time, extrap, cdfout, logFlag));
    return __result;
END_RCPP
}
// dCount_naive_scalar_bi
double dCount_naive_scalar_bi(unsigned x, const Rcpp::List distPars, const std::string dist, const unsigned& nsteps, double time, bool extrap, bool logFlag);
RcppExport SEXP Countr_dCount_naive_scalar_bi(SEXP xSEXP, SEXP distParsSEXP, SEXP distSEXP, SEXP nstepsSEXP, SEXP timeSEXP, SEXP extrapSEXP, SEXP logFlagSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< unsigned >::type x(xSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List >::type distPars(distParsSEXP);
    Rcpp::traits::input_parameter< const std::string >::type dist(distSEXP);
    Rcpp::traits::input_parameter< const unsigned& >::type nsteps(nstepsSEXP);
    Rcpp::traits::input_parameter< double >::type time(timeSEXP);
    Rcpp::traits::input_parameter< bool >::type extrap(extrapSEXP);
    Rcpp::traits::input_parameter< bool >::type logFlag(logFlagSEXP);
    __result = Rcpp::wrap(dCount_naive_scalar_bi(x, distPars, dist, nsteps, time, extrap, logFlag));
    return __result;
END_RCPP
}
// dCount_naive_scalar_user
double dCount_naive_scalar_user(unsigned x, const Rcpp::List distPars, arma::vec extrapolPars, Rcpp::Function survR, const unsigned& nsteps, double time, bool extrap, bool logFlag);
RcppExport SEXP Countr_dCount_naive_scalar_user(SEXP xSEXP, SEXP distParsSEXP, SEXP extrapolParsSEXP, SEXP survRSEXP, SEXP nstepsSEXP, SEXP timeSEXP, SEXP extrapSEXP, SEXP logFlagSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< unsigned >::type x(xSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List >::type distPars(distParsSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type extrapolPars(extrapolParsSEXP);
    Rcpp::traits::input_parameter< Rcpp::Function >::type survR(survRSEXP);
    Rcpp::traits::input_parameter< const unsigned& >::type nsteps(nstepsSEXP);
    Rcpp::traits::input_parameter< double >::type time(timeSEXP);
    Rcpp::traits::input_parameter< bool >::type extrap(extrapSEXP);
    Rcpp::traits::input_parameter< bool >::type logFlag(logFlagSEXP);
    __result = Rcpp::wrap(dCount_naive_scalar_user(x, distPars, extrapolPars, survR, nsteps, time, extrap, logFlag));
    return __result;
END_RCPP
}
// getProbsmodified_dePril
arma::vec getProbsmodified_dePril(unsigned xnum, const Rcpp::List distPars, const std::string dist, const Rcpp::List distPars0, const std::string dist0, arma::vec extrapolPars, const unsigned& nsteps, double time, bool extrap);
RcppExport SEXP Countr_getProbsmodified_dePril(SEXP xnumSEXP, SEXP distParsSEXP, SEXP distSEXP, SEXP distPars0SEXP, SEXP dist0SEXP, SEXP extrapolParsSEXP, SEXP nstepsSEXP, SEXP timeSEXP, SEXP extrapSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< unsigned >::type xnum(xnumSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List >::type distPars(distParsSEXP);
    Rcpp::traits::input_parameter< const std::string >::type dist(distSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List >::type distPars0(distPars0SEXP);
    Rcpp::traits::input_parameter< const std::string >::type dist0(dist0SEXP);
    Rcpp::traits::input_parameter< arma::vec >::type extrapolPars(extrapolParsSEXP);
    Rcpp::traits::input_parameter< const unsigned& >::type nsteps(nstepsSEXP);
    Rcpp::traits::input_parameter< double >::type time(timeSEXP);
    Rcpp::traits::input_parameter< bool >::type extrap(extrapSEXP);
    __result = Rcpp::wrap(getProbsmodified_dePril(xnum, distPars, dist, distPars0, dist0, extrapolPars, nsteps, time, extrap));
    return __result;
END_RCPP
}
// dmodifiedCount_bi
arma::vec dmodifiedCount_bi(arma::Col<unsigned> x, const Rcpp::List distPars, const std::string dist, const Rcpp::List distPars0, const std::string dist0, const unsigned& nsteps, double time, bool extrap, bool cdfout, bool logFlag);
RcppExport SEXP Countr_dmodifiedCount_bi(SEXP xSEXP, SEXP distParsSEXP, SEXP distSEXP, SEXP distPars0SEXP, SEXP dist0SEXP, SEXP nstepsSEXP, SEXP timeSEXP, SEXP extrapSEXP, SEXP cdfoutSEXP, SEXP logFlagSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< arma::Col<unsigned> >::type x(xSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List >::type distPars(distParsSEXP);
    Rcpp::traits::input_parameter< const std::string >::type dist(distSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List >::type distPars0(distPars0SEXP);
    Rcpp::traits::input_parameter< const std::string >::type dist0(dist0SEXP);
    Rcpp::traits::input_parameter< const unsigned& >::type nsteps(nstepsSEXP);
    Rcpp::traits::input_parameter< double >::type time(timeSEXP);
    Rcpp::traits::input_parameter< bool >::type extrap(extrapSEXP);
    Rcpp::traits::input_parameter< bool >::type cdfout(cdfoutSEXP);
    Rcpp::traits::input_parameter< bool >::type logFlag(logFlagSEXP);
    __result = Rcpp::wrap(dmodifiedCount_bi(x, distPars, dist, distPars0, dist0, nsteps, time, extrap, cdfout, logFlag));
    return __result;
END_RCPP
}
// dmodifiedCount_user
arma::vec dmodifiedCount_user(arma::Col<unsigned> x, const Rcpp::List distPars, Rcpp::Function survR, const Rcpp::List distPars0, Rcpp::Function survR0, arma::vec extrapolPars, const unsigned& nsteps, double time, bool extrap, bool cdfout, bool logFlag);
RcppExport SEXP Countr_dmodifiedCount_user(SEXP xSEXP, SEXP distParsSEXP, SEXP survRSEXP, SEXP distPars0SEXP, SEXP survR0SEXP, SEXP extrapolParsSEXP, SEXP nstepsSEXP, SEXP timeSEXP, SEXP extrapSEXP, SEXP cdfoutSEXP, SEXP logFlagSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< arma::Col<unsigned> >::type x(xSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List >::type distPars(distParsSEXP);
    Rcpp::traits::input_parameter< Rcpp::Function >::type survR(survRSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List >::type distPars0(distPars0SEXP);
    Rcpp::traits::input_parameter< Rcpp::Function >::type survR0(survR0SEXP);
    Rcpp::traits::input_parameter< arma::vec >::type extrapolPars(extrapolParsSEXP);
    Rcpp::traits::input_parameter< const unsigned& >::type nsteps(nstepsSEXP);
    Rcpp::traits::input_parameter< double >::type time(timeSEXP);
    Rcpp::traits::input_parameter< bool >::type extrap(extrapSEXP);
    Rcpp::traits::input_parameter< bool >::type cdfout(cdfoutSEXP);
    Rcpp::traits::input_parameter< bool >::type logFlag(logFlagSEXP);
    __result = Rcpp::wrap(dmodifiedCount_user(x, distPars, survR, distPars0, survR0, extrapolPars, nsteps, time, extrap, cdfout, logFlag));
    return __result;
END_RCPP
}
// dmodifiedCount_scalar_bi
double dmodifiedCount_scalar_bi(unsigned x, const Rcpp::List distPars, const std::string dist, const Rcpp::List distPars0, const std::string dist0, const unsigned& nsteps, double time, bool extrap, bool logFlag);
RcppExport SEXP Countr_dmodifiedCount_scalar_bi(SEXP xSEXP, SEXP distParsSEXP, SEXP distSEXP, SEXP distPars0SEXP, SEXP dist0SEXP, SEXP nstepsSEXP, SEXP timeSEXP, SEXP extrapSEXP, SEXP logFlagSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< unsigned >::type x(xSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List >::type distPars(distParsSEXP);
    Rcpp::traits::input_parameter< const std::string >::type dist(distSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List >::type distPars0(distPars0SEXP);
    Rcpp::traits::input_parameter< const std::string >::type dist0(dist0SEXP);
    Rcpp::traits::input_parameter< const unsigned& >::type nsteps(nstepsSEXP);
    Rcpp::traits::input_parameter< double >::type time(timeSEXP);
    Rcpp::traits::input_parameter< bool >::type extrap(extrapSEXP);
    Rcpp::traits::input_parameter< bool >::type logFlag(logFlagSEXP);
    __result = Rcpp::wrap(dmodifiedCount_scalar_bi(x, distPars, dist, distPars0, dist0, nsteps, time, extrap, logFlag));
    return __result;
END_RCPP
}
// dmodifiedCount_scalar_user
double dmodifiedCount_scalar_user(unsigned x, const Rcpp::List distPars, Rcpp::Function survR, const Rcpp::List distPars0, Rcpp::Function survR0, arma::vec extrapolPars, const unsigned& nsteps, double time, bool extrap, bool cdfout, bool logFlag);
RcppExport SEXP Countr_dmodifiedCount_scalar_user(SEXP xSEXP, SEXP distParsSEXP, SEXP survRSEXP, SEXP distPars0SEXP, SEXP survR0SEXP, SEXP extrapolParsSEXP, SEXP nstepsSEXP, SEXP timeSEXP, SEXP extrapSEXP, SEXP cdfoutSEXP, SEXP logFlagSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< unsigned >::type x(xSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List >::type distPars(distParsSEXP);
    Rcpp::traits::input_parameter< Rcpp::Function >::type survR(survRSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List >::type distPars0(distPars0SEXP);
    Rcpp::traits::input_parameter< Rcpp::Function >::type survR0(survR0SEXP);
    Rcpp::traits::input_parameter< arma::vec >::type extrapolPars(extrapolParsSEXP);
    Rcpp::traits::input_parameter< const unsigned& >::type nsteps(nstepsSEXP);
    Rcpp::traits::input_parameter< double >::type time(timeSEXP);
    Rcpp::traits::input_parameter< bool >::type extrap(extrapSEXP);
    Rcpp::traits::input_parameter< bool >::type cdfout(cdfoutSEXP);
    Rcpp::traits::input_parameter< bool >::type logFlag(logFlagSEXP);
    __result = Rcpp::wrap(dmodifiedCount_scalar_user(x, distPars, survR, distPars0, survR0, extrapolPars, nsteps, time, extrap, cdfout, logFlag));
    return __result;
END_RCPP
}
// dWeibullgammaCount_mat
arma::vec dWeibullgammaCount_mat(arma::Col<unsigned> x, double shape, double r, double alpha, double time, bool logFlag, unsigned jmax);
static SEXP Countr_dWeibullgammaCount_mat_try(SEXP xSEXP, SEXP shapeSEXP, SEXP rSEXP, SEXP alphaSEXP, SEXP timeSEXP, SEXP logFlagSEXP, SEXP jmaxSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::traits::input_parameter< arma::Col<unsigned> >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type shape(shapeSEXP);
    Rcpp::traits::input_parameter< double >::type r(rSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< double >::type time(timeSEXP);
    Rcpp::traits::input_parameter< bool >::type logFlag(logFlagSEXP);
    Rcpp::traits::input_parameter< unsigned >::type jmax(jmaxSEXP);
    __result = Rcpp::wrap(dWeibullgammaCount_mat(x, shape, r, alpha, time, logFlag, jmax));
    return __result;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP Countr_dWeibullgammaCount_mat(SEXP xSEXP, SEXP shapeSEXP, SEXP rSEXP, SEXP alphaSEXP, SEXP timeSEXP, SEXP logFlagSEXP, SEXP jmaxSEXP) {
    SEXP __result;
    {
        Rcpp::RNGScope __rngScope;
        __result = PROTECT(Countr_dWeibullgammaCount_mat_try(xSEXP, shapeSEXP, rSEXP, alphaSEXP, timeSEXP, logFlagSEXP, jmaxSEXP));
    }
    Rboolean __isInterrupt = Rf_inherits(__result, "interrupted-error");
    if (__isInterrupt) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean __isError = Rf_inherits(__result, "try-error");
    if (__isError) {
        SEXP __msgSEXP = Rf_asChar(__result);
        UNPROTECT(1);
        Rf_error(CHAR(__msgSEXP));
    }
    UNPROTECT(1);
    return __result;
}
// dWeibullgammaCount_mat_Covariates
arma::vec dWeibullgammaCount_mat_Covariates(arma::Col<unsigned> x, double cc, double r, double alpha, arma::mat Xcovar, arma::vec beta, double t, bool logFlag, unsigned jmax);
static SEXP Countr_dWeibullgammaCount_mat_Covariates_try(SEXP xSEXP, SEXP ccSEXP, SEXP rSEXP, SEXP alphaSEXP, SEXP XcovarSEXP, SEXP betaSEXP, SEXP tSEXP, SEXP logFlagSEXP, SEXP jmaxSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::traits::input_parameter< arma::Col<unsigned> >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type cc(ccSEXP);
    Rcpp::traits::input_parameter< double >::type r(rSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Xcovar(XcovarSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< double >::type t(tSEXP);
    Rcpp::traits::input_parameter< bool >::type logFlag(logFlagSEXP);
    Rcpp::traits::input_parameter< unsigned >::type jmax(jmaxSEXP);
    __result = Rcpp::wrap(dWeibullgammaCount_mat_Covariates(x, cc, r, alpha, Xcovar, beta, t, logFlag, jmax));
    return __result;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP Countr_dWeibullgammaCount_mat_Covariates(SEXP xSEXP, SEXP ccSEXP, SEXP rSEXP, SEXP alphaSEXP, SEXP XcovarSEXP, SEXP betaSEXP, SEXP tSEXP, SEXP logFlagSEXP, SEXP jmaxSEXP) {
    SEXP __result;
    {
        Rcpp::RNGScope __rngScope;
        __result = PROTECT(Countr_dWeibullgammaCount_mat_Covariates_try(xSEXP, ccSEXP, rSEXP, alphaSEXP, XcovarSEXP, betaSEXP, tSEXP, logFlagSEXP, jmaxSEXP));
    }
    Rboolean __isInterrupt = Rf_inherits(__result, "interrupted-error");
    if (__isInterrupt) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean __isError = Rf_inherits(__result, "try-error");
    if (__isError) {
        SEXP __msgSEXP = Rf_asChar(__result);
        UNPROTECT(1);
        Rf_error(CHAR(__msgSEXP));
    }
    UNPROTECT(1);
    return __result;
}
// dWeibullgammaCount_acc
arma::vec dWeibullgammaCount_acc(arma::Col<unsigned> x, double shape, double r, double alpha, double time, bool logFlag, unsigned jmax, int nmax, double eps, bool printa);
static SEXP Countr_dWeibullgammaCount_acc_try(SEXP xSEXP, SEXP shapeSEXP, SEXP rSEXP, SEXP alphaSEXP, SEXP timeSEXP, SEXP logFlagSEXP, SEXP jmaxSEXP, SEXP nmaxSEXP, SEXP epsSEXP, SEXP printaSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::traits::input_parameter< arma::Col<unsigned> >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type shape(shapeSEXP);
    Rcpp::traits::input_parameter< double >::type r(rSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< double >::type time(timeSEXP);
    Rcpp::traits::input_parameter< bool >::type logFlag(logFlagSEXP);
    Rcpp::traits::input_parameter< unsigned >::type jmax(jmaxSEXP);
    Rcpp::traits::input_parameter< int >::type nmax(nmaxSEXP);
    Rcpp::traits::input_parameter< double >::type eps(epsSEXP);
    Rcpp::traits::input_parameter< bool >::type printa(printaSEXP);
    __result = Rcpp::wrap(dWeibullgammaCount_acc(x, shape, r, alpha, time, logFlag, jmax, nmax, eps, printa));
    return __result;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP Countr_dWeibullgammaCount_acc(SEXP xSEXP, SEXP shapeSEXP, SEXP rSEXP, SEXP alphaSEXP, SEXP timeSEXP, SEXP logFlagSEXP, SEXP jmaxSEXP, SEXP nmaxSEXP, SEXP epsSEXP, SEXP printaSEXP) {
    SEXP __result;
    {
        Rcpp::RNGScope __rngScope;
        __result = PROTECT(Countr_dWeibullgammaCount_acc_try(xSEXP, shapeSEXP, rSEXP, alphaSEXP, timeSEXP, logFlagSEXP, jmaxSEXP, nmaxSEXP, epsSEXP, printaSEXP));
    }
    Rboolean __isInterrupt = Rf_inherits(__result, "interrupted-error");
    if (__isInterrupt) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean __isError = Rf_inherits(__result, "try-error");
    if (__isError) {
        SEXP __msgSEXP = Rf_asChar(__result);
        UNPROTECT(1);
        Rf_error(CHAR(__msgSEXP));
    }
    UNPROTECT(1);
    return __result;
}
// dWeibullgammaCount_acc_Covariates
arma::vec dWeibullgammaCount_acc_Covariates(arma::Col<unsigned> x, double cc, double r, double alpha, arma::mat Xcovar, arma::vec beta, double t, bool logFlag, unsigned jmax, int nmax, double eps, bool printa);
static SEXP Countr_dWeibullgammaCount_acc_Covariates_try(SEXP xSEXP, SEXP ccSEXP, SEXP rSEXP, SEXP alphaSEXP, SEXP XcovarSEXP, SEXP betaSEXP, SEXP tSEXP, SEXP logFlagSEXP, SEXP jmaxSEXP, SEXP nmaxSEXP, SEXP epsSEXP, SEXP printaSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::traits::input_parameter< arma::Col<unsigned> >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type cc(ccSEXP);
    Rcpp::traits::input_parameter< double >::type r(rSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Xcovar(XcovarSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< double >::type t(tSEXP);
    Rcpp::traits::input_parameter< bool >::type logFlag(logFlagSEXP);
    Rcpp::traits::input_parameter< unsigned >::type jmax(jmaxSEXP);
    Rcpp::traits::input_parameter< int >::type nmax(nmaxSEXP);
    Rcpp::traits::input_parameter< double >::type eps(epsSEXP);
    Rcpp::traits::input_parameter< bool >::type printa(printaSEXP);
    __result = Rcpp::wrap(dWeibullgammaCount_acc_Covariates(x, cc, r, alpha, Xcovar, beta, t, logFlag, jmax, nmax, eps, printa));
    return __result;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP Countr_dWeibullgammaCount_acc_Covariates(SEXP xSEXP, SEXP ccSEXP, SEXP rSEXP, SEXP alphaSEXP, SEXP XcovarSEXP, SEXP betaSEXP, SEXP tSEXP, SEXP logFlagSEXP, SEXP jmaxSEXP, SEXP nmaxSEXP, SEXP epsSEXP, SEXP printaSEXP) {
    SEXP __result;
    {
        Rcpp::RNGScope __rngScope;
        __result = PROTECT(Countr_dWeibullgammaCount_acc_Covariates_try(xSEXP, ccSEXP, rSEXP, alphaSEXP, XcovarSEXP, betaSEXP, tSEXP, logFlagSEXP, jmaxSEXP, nmaxSEXP, epsSEXP, printaSEXP));
    }
    Rboolean __isInterrupt = Rf_inherits(__result, "interrupted-error");
    if (__isInterrupt) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean __isError = Rf_inherits(__result, "try-error");
    if (__isError) {
        SEXP __msgSEXP = Rf_asChar(__result);
        UNPROTECT(1);
        Rf_error(CHAR(__msgSEXP));
    }
    UNPROTECT(1);
    return __result;
}
// alphagen
arma::mat alphagen(double cc, unsigned jrow, unsigned ncol);
static SEXP Countr_alphagen_try(SEXP ccSEXP, SEXP jrowSEXP, SEXP ncolSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::traits::input_parameter< double >::type cc(ccSEXP);
    Rcpp::traits::input_parameter< unsigned >::type jrow(jrowSEXP);
    Rcpp::traits::input_parameter< unsigned >::type ncol(ncolSEXP);
    __result = Rcpp::wrap(alphagen(cc, jrow, ncol));
    return __result;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP Countr_alphagen(SEXP ccSEXP, SEXP jrowSEXP, SEXP ncolSEXP) {
    SEXP __result;
    {
        Rcpp::RNGScope __rngScope;
        __result = PROTECT(Countr_alphagen_try(ccSEXP, jrowSEXP, ncolSEXP));
    }
    Rboolean __isInterrupt = Rf_inherits(__result, "interrupted-error");
    if (__isInterrupt) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean __isError = Rf_inherits(__result, "try-error");
    if (__isError) {
        SEXP __msgSEXP = Rf_asChar(__result);
        UNPROTECT(1);
        Rf_error(CHAR(__msgSEXP));
    }
    UNPROTECT(1);
    return __result;
}
// dWeibullCount_mat
arma::vec dWeibullCount_mat(arma::Col<unsigned> x, double shape, double scale, double time, bool logFlag, unsigned jmax);
static SEXP Countr_dWeibullCount_mat_try(SEXP xSEXP, SEXP shapeSEXP, SEXP scaleSEXP, SEXP timeSEXP, SEXP logFlagSEXP, SEXP jmaxSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::traits::input_parameter< arma::Col<unsigned> >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type shape(shapeSEXP);
    Rcpp::traits::input_parameter< double >::type scale(scaleSEXP);
    Rcpp::traits::input_parameter< double >::type time(timeSEXP);
    Rcpp::traits::input_parameter< bool >::type logFlag(logFlagSEXP);
    Rcpp::traits::input_parameter< unsigned >::type jmax(jmaxSEXP);
    __result = Rcpp::wrap(dWeibullCount_mat(x, shape, scale, time, logFlag, jmax));
    return __result;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP Countr_dWeibullCount_mat(SEXP xSEXP, SEXP shapeSEXP, SEXP scaleSEXP, SEXP timeSEXP, SEXP logFlagSEXP, SEXP jmaxSEXP) {
    SEXP __result;
    {
        Rcpp::RNGScope __rngScope;
        __result = PROTECT(Countr_dWeibullCount_mat_try(xSEXP, shapeSEXP, scaleSEXP, timeSEXP, logFlagSEXP, jmaxSEXP));
    }
    Rboolean __isInterrupt = Rf_inherits(__result, "interrupted-error");
    if (__isInterrupt) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean __isError = Rf_inherits(__result, "try-error");
    if (__isError) {
        SEXP __msgSEXP = Rf_asChar(__result);
        UNPROTECT(1);
        Rf_error(CHAR(__msgSEXP));
    }
    UNPROTECT(1);
    return __result;
}
// dWeibullCount_acc
arma::vec dWeibullCount_acc(arma::Col<unsigned> x, double shape, double scale, double time, bool logFlag, unsigned jmax, int nmax, double eps, bool printa);
static SEXP Countr_dWeibullCount_acc_try(SEXP xSEXP, SEXP shapeSEXP, SEXP scaleSEXP, SEXP timeSEXP, SEXP logFlagSEXP, SEXP jmaxSEXP, SEXP nmaxSEXP, SEXP epsSEXP, SEXP printaSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::traits::input_parameter< arma::Col<unsigned> >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type shape(shapeSEXP);
    Rcpp::traits::input_parameter< double >::type scale(scaleSEXP);
    Rcpp::traits::input_parameter< double >::type time(timeSEXP);
    Rcpp::traits::input_parameter< bool >::type logFlag(logFlagSEXP);
    Rcpp::traits::input_parameter< unsigned >::type jmax(jmaxSEXP);
    Rcpp::traits::input_parameter< int >::type nmax(nmaxSEXP);
    Rcpp::traits::input_parameter< double >::type eps(epsSEXP);
    Rcpp::traits::input_parameter< bool >::type printa(printaSEXP);
    __result = Rcpp::wrap(dWeibullCount_acc(x, shape, scale, time, logFlag, jmax, nmax, eps, printa));
    return __result;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP Countr_dWeibullCount_acc(SEXP xSEXP, SEXP shapeSEXP, SEXP scaleSEXP, SEXP timeSEXP, SEXP logFlagSEXP, SEXP jmaxSEXP, SEXP nmaxSEXP, SEXP epsSEXP, SEXP printaSEXP) {
    SEXP __result;
    {
        Rcpp::RNGScope __rngScope;
        __result = PROTECT(Countr_dWeibullCount_acc_try(xSEXP, shapeSEXP, scaleSEXP, timeSEXP, logFlagSEXP, jmaxSEXP, nmaxSEXP, epsSEXP, printaSEXP));
    }
    Rboolean __isInterrupt = Rf_inherits(__result, "interrupted-error");
    if (__isInterrupt) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean __isError = Rf_inherits(__result, "try-error");
    if (__isError) {
        SEXP __msgSEXP = Rf_asChar(__result);
        UNPROTECT(1);
        Rf_error(CHAR(__msgSEXP));
    }
    UNPROTECT(1);
    return __result;
}
// dWeibullInterArrivalCountFrankCopula
arma::vec dWeibullInterArrivalCountFrankCopula(arma::Col <unsigned> x, arma::Col <unsigned> y, arma::vec shapeX, arma::vec shapeY, arma::vec scaleX, arma::vec scaleY, double theta, double t, bool logFlag, unsigned jmax, int nmax, double eps);
static SEXP Countr_dWeibullInterArrivalCountFrankCopula_try(SEXP xSEXP, SEXP ySEXP, SEXP shapeXSEXP, SEXP shapeYSEXP, SEXP scaleXSEXP, SEXP scaleYSEXP, SEXP thetaSEXP, SEXP tSEXP, SEXP logFlagSEXP, SEXP jmaxSEXP, SEXP nmaxSEXP, SEXP epsSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::traits::input_parameter< arma::Col <unsigned> >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::Col <unsigned> >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::vec >::type shapeX(shapeXSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type shapeY(shapeYSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type scaleX(scaleXSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type scaleY(scaleYSEXP);
    Rcpp::traits::input_parameter< double >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< double >::type t(tSEXP);
    Rcpp::traits::input_parameter< bool >::type logFlag(logFlagSEXP);
    Rcpp::traits::input_parameter< unsigned >::type jmax(jmaxSEXP);
    Rcpp::traits::input_parameter< int >::type nmax(nmaxSEXP);
    Rcpp::traits::input_parameter< double >::type eps(epsSEXP);
    __result = Rcpp::wrap(dWeibullInterArrivalCountFrankCopula(x, y, shapeX, shapeY, scaleX, scaleY, theta, t, logFlag, jmax, nmax, eps));
    return __result;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP Countr_dWeibullInterArrivalCountFrankCopula(SEXP xSEXP, SEXP ySEXP, SEXP shapeXSEXP, SEXP shapeYSEXP, SEXP scaleXSEXP, SEXP scaleYSEXP, SEXP thetaSEXP, SEXP tSEXP, SEXP logFlagSEXP, SEXP jmaxSEXP, SEXP nmaxSEXP, SEXP epsSEXP) {
    SEXP __result;
    {
        Rcpp::RNGScope __rngScope;
        __result = PROTECT(Countr_dWeibullInterArrivalCountFrankCopula_try(xSEXP, ySEXP, shapeXSEXP, shapeYSEXP, scaleXSEXP, scaleYSEXP, thetaSEXP, tSEXP, logFlagSEXP, jmaxSEXP, nmaxSEXP, epsSEXP));
    }
    Rboolean __isInterrupt = Rf_inherits(__result, "interrupted-error");
    if (__isInterrupt) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean __isError = Rf_inherits(__result, "try-error");
    if (__isError) {
        SEXP __msgSEXP = Rf_asChar(__result);
        UNPROTECT(1);
        Rf_error(CHAR(__msgSEXP));
    }
    UNPROTECT(1);
    return __result;
}
// dWeibullInterArrivalCountFrankCopula_uni
arma::vec dWeibullInterArrivalCountFrankCopula_uni(arma::Col <unsigned> x, arma::Col <unsigned> y, double shapeX, double shapeY, arma::vec scaleX, arma::vec scaleY, double theta, double t, bool logFlag, unsigned jmax, int nmax, double eps);
static SEXP Countr_dWeibullInterArrivalCountFrankCopula_uni_try(SEXP xSEXP, SEXP ySEXP, SEXP shapeXSEXP, SEXP shapeYSEXP, SEXP scaleXSEXP, SEXP scaleYSEXP, SEXP thetaSEXP, SEXP tSEXP, SEXP logFlagSEXP, SEXP jmaxSEXP, SEXP nmaxSEXP, SEXP epsSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::traits::input_parameter< arma::Col <unsigned> >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::Col <unsigned> >::type y(ySEXP);
    Rcpp::traits::input_parameter< double >::type shapeX(shapeXSEXP);
    Rcpp::traits::input_parameter< double >::type shapeY(shapeYSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type scaleX(scaleXSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type scaleY(scaleYSEXP);
    Rcpp::traits::input_parameter< double >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< double >::type t(tSEXP);
    Rcpp::traits::input_parameter< bool >::type logFlag(logFlagSEXP);
    Rcpp::traits::input_parameter< unsigned >::type jmax(jmaxSEXP);
    Rcpp::traits::input_parameter< int >::type nmax(nmaxSEXP);
    Rcpp::traits::input_parameter< double >::type eps(epsSEXP);
    __result = Rcpp::wrap(dWeibullInterArrivalCountFrankCopula_uni(x, y, shapeX, shapeY, scaleX, scaleY, theta, t, logFlag, jmax, nmax, eps));
    return __result;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP Countr_dWeibullInterArrivalCountFrankCopula_uni(SEXP xSEXP, SEXP ySEXP, SEXP shapeXSEXP, SEXP shapeYSEXP, SEXP scaleXSEXP, SEXP scaleYSEXP, SEXP thetaSEXP, SEXP tSEXP, SEXP logFlagSEXP, SEXP jmaxSEXP, SEXP nmaxSEXP, SEXP epsSEXP) {
    SEXP __result;
    {
        Rcpp::RNGScope __rngScope;
        __result = PROTECT(Countr_dWeibullInterArrivalCountFrankCopula_uni_try(xSEXP, ySEXP, shapeXSEXP, shapeYSEXP, scaleXSEXP, scaleYSEXP, thetaSEXP, tSEXP, logFlagSEXP, jmaxSEXP, nmaxSEXP, epsSEXP));
    }
    Rboolean __isInterrupt = Rf_inherits(__result, "interrupted-error");
    if (__isInterrupt) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean __isError = Rf_inherits(__result, "try-error");
    if (__isError) {
        SEXP __msgSEXP = Rf_asChar(__result);
        UNPROTECT(1);
        Rf_error(CHAR(__msgSEXP));
    }
    UNPROTECT(1);
    return __result;
}

// validate (ensure exported C++ functions exist before calling them)
static int Countr_RcppExport_validate(const char* sig) { 
    static std::set<std::string> signatures;
    if (signatures.empty()) {
        signatures.insert("arma::vec(*dRenewalFrankCopula_user)(arma::Col <unsigned>,arma::Col <unsigned>,Rcpp::Function,Rcpp::Function,Rcpp::List,Rcpp::List,Rcpp::List,Rcpp::List,double,double,bool,unsigned,bool)");
        signatures.insert("arma::vec(*dRenewalFrankCopula_bi)(arma::Col <unsigned>,arma::Col <unsigned>,const std::string,const std::string,Rcpp::List,Rcpp::List,double,double,bool,unsigned,bool)");
        signatures.insert("arma::vec(*dWeibullgammaCount_mat)(arma::Col<unsigned>,double,double,double,double,bool,unsigned)");
        signatures.insert("arma::vec(*dWeibullgammaCount_mat_Covariates)(arma::Col<unsigned>,double,double,double,arma::mat,arma::vec,double,bool,unsigned)");
        signatures.insert("arma::vec(*dWeibullgammaCount_acc)(arma::Col<unsigned>,double,double,double,double,bool,unsigned,int,double,bool)");
        signatures.insert("arma::vec(*dWeibullgammaCount_acc_Covariates)(arma::Col<unsigned>,double,double,double,arma::mat,arma::vec,double,bool,unsigned,int,double,bool)");
        signatures.insert("arma::mat(*alphagen)(double,unsigned,unsigned)");
        signatures.insert("arma::vec(*dWeibullCount_mat)(arma::Col<unsigned>,double,double,double,bool,unsigned)");
        signatures.insert("arma::vec(*dWeibullCount_acc)(arma::Col<unsigned>,double,double,double,bool,unsigned,int,double,bool)");
        signatures.insert("arma::vec(*dWeibullInterArrivalCountFrankCopula)(arma::Col <unsigned>,arma::Col <unsigned>,arma::vec,arma::vec,arma::vec,arma::vec,double,double,bool,unsigned,int,double)");
        signatures.insert("arma::vec(*dWeibullInterArrivalCountFrankCopula_uni)(arma::Col <unsigned>,arma::Col <unsigned>,double,double,arma::vec,arma::vec,double,double,bool,unsigned,int,double)");
    }
    return signatures.find(sig) != signatures.end();
}

// registerCCallable (register entry points for exported C++ functions)
RcppExport SEXP Countr_RcppExport_registerCCallable() { 
    R_RegisterCCallable("Countr", "Countr_dRenewalFrankCopula_user", (DL_FUNC)Countr_dRenewalFrankCopula_user_try);
    R_RegisterCCallable("Countr", "Countr_dRenewalFrankCopula_bi", (DL_FUNC)Countr_dRenewalFrankCopula_bi_try);
    R_RegisterCCallable("Countr", "Countr_dWeibullgammaCount_mat", (DL_FUNC)Countr_dWeibullgammaCount_mat_try);
    R_RegisterCCallable("Countr", "Countr_dWeibullgammaCount_mat_Covariates", (DL_FUNC)Countr_dWeibullgammaCount_mat_Covariates_try);
    R_RegisterCCallable("Countr", "Countr_dWeibullgammaCount_acc", (DL_FUNC)Countr_dWeibullgammaCount_acc_try);
    R_RegisterCCallable("Countr", "Countr_dWeibullgammaCount_acc_Covariates", (DL_FUNC)Countr_dWeibullgammaCount_acc_Covariates_try);
    R_RegisterCCallable("Countr", "Countr_alphagen", (DL_FUNC)Countr_alphagen_try);
    R_RegisterCCallable("Countr", "Countr_dWeibullCount_mat", (DL_FUNC)Countr_dWeibullCount_mat_try);
    R_RegisterCCallable("Countr", "Countr_dWeibullCount_acc", (DL_FUNC)Countr_dWeibullCount_acc_try);
    R_RegisterCCallable("Countr", "Countr_dWeibullInterArrivalCountFrankCopula", (DL_FUNC)Countr_dWeibullInterArrivalCountFrankCopula_try);
    R_RegisterCCallable("Countr", "Countr_dWeibullInterArrivalCountFrankCopula_uni", (DL_FUNC)Countr_dWeibullInterArrivalCountFrankCopula_uni_try);
    R_RegisterCCallable("Countr", "Countr_RcppExport_validate", (DL_FUNC)Countr_RcppExport_validate);
    return R_NilValue;
}
